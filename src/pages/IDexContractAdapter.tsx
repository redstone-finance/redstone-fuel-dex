import { ContractParamsProvider } from "redstone-sdk";
import { DexAbi, DexAbi__factory, TokenAbi__factory } from "../autogenerated";
import { FuelContractConnector, num } from "@redstone-finance/fuel-connector";
import {
  Contract,
  InvocationResult,
  WalletLocked,
  WalletUnlocked,
} from "fuels";

export interface IDexContractAdapter {
  changeEthToUsd(
    paramsProvider: ContractParamsProvider,
    amount: number
  ): Promise<string>;

  withdrawFunds(): Promise<string>;
}

class DexContractAdapter implements IDexContractAdapter {
  constructor(protected contract: DexContract, private gasLimit: number) {}

  async changeEthToUsd(
    paramsProvider: ContractParamsProvider,
    amount: number
  ): Promise<string> {

    const result = await this.contract.functions
      .change_eth_to_usd((await paramsProvider.getPayloadData()) as number[])
      .callParams({ forward: { amount: amount * 10 ** 9 } })
      .addContracts([
        // @ts-ignore
        TokenAbi__factory.connect(
          "0x6cb020a8d81d9394b9b3c70e0994b33835d43dd8069b0e427be574a2ee3c3437",
          this.contract.provider
        ),
      ])
      .txParams({
        gasLimit: this.gasLimit,
        gasPrice: 1,
        variableOutputs: 1,
      })
      .call();

    return result.transactionId;
  }

  async withdrawFunds(): Promise<string> {
    const result = await this.contract.functions
      .withdraw_funds()
      .txParams({
        gasLimit: this.gasLimit,
        gasPrice: 1,
        variableOutputs: 1,
      })
      .call();

    return result.transactionId;
  }

  protected extractNumbers(result: InvocationResult): number[] {
    return result.value.map(num);
  }
}

export type DexContract = DexAbi & Contract;

export class DexContractConnector extends FuelContractConnector<IDexContractAdapter> {
  constructor(
    wallet: WalletLocked | WalletUnlocked | undefined,
    private contractId: string
  ) {
    super(wallet);
  }

  async getContract(): Promise<DexContract> {
    return DexAbi__factory.connect(this.contractId, this.wallet!);
  }

  async getAdapter(): Promise<DexContractAdapter> {
    return new DexContractAdapter(await this.getContract(), this.getGasLimit());
  }
}

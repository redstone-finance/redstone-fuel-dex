import { FuelContractConnector } from "@redstone-finance/fuel-connector";
import { Contract, WalletLocked, WalletUnlocked } from "fuels";
import {
  DexAbi,
  DexAbi__factory,
  TokenAbi,
  TokenAbi__factory,
} from "../autogenerated";
import { DexContractAdapter } from "./DexContractAdapter";
import { FUEL_TOKEN_ID } from "../config/constants";

export type DexContract = DexAbi & Contract;
export type TokenContract = TokenAbi & Contract;

export class DexContractConnector extends FuelContractConnector<DexContractAdapter> {
  constructor(
    wallet: WalletLocked | WalletUnlocked | undefined,
    private contractId: string
  ) {
    super(wallet);
  }

  async getContract(): Promise<DexContract> {
    return DexAbi__factory.connect(this.contractId, this.wallet!);
  }

  async getToken(): Promise<TokenContract> {
    return TokenAbi__factory.connect(FUEL_TOKEN_ID, this.wallet!);
  }

  async getAdapter(): Promise<DexContractAdapter> {
    return new DexContractAdapter(
      await this.getContract(),
      await this.getToken(),
      this.getGasLimit()
    );
  }
}
